# OpenTelemetry Collector Configuration for Spontra Platform

receivers:
  # OTLP receiver for collecting telemetry data
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Prometheus receiver for scraping metrics
  prometheus:
    config:
      global:
        scrape_interval: 15s
      scrape_configs:
        - job_name: 'otel-collector'
          static_configs:
            - targets: ['localhost:8889']

  # Jaeger receiver for legacy compatibility
  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14250
      thrift_http:
        endpoint: 0.0.0.0:14268

  # Zipkin receiver
  zipkin:
    endpoint: 0.0.0.0:9411

processors:
  # Batch processor for better performance
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Memory limiter to prevent OOM
  memory_limiter:
    limit_mib: 512
    spike_limit_mib: 128
    check_interval: 5s

  # Resource processor to add/modify resource attributes
  resource:
    attributes:
      - key: environment
        value: development
        action: upsert
      - key: service.namespace
        value: spontra
        action: upsert

  # Attributes processor for span/metric attributes
  attributes:
    actions:
      - key: http.user_agent
        action: delete
      - key: http.request.header.authorization
        action: delete

  # Span processor for trace sampling
  probabilistic_sampler:
    sampling_percentage: 100  # 100% sampling in development

  # Transform processor for metrics
  transform:
    metric_statements:
      - context: datapoint
        statements:
          - set(attributes["environment"], "development")

exporters:
  # Prometheus exporter for metrics
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: "spontra"
    send_timestamps: true
    metric_expiration: 180m
    enable_open_metrics: true

  # Jaeger exporter for traces
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true

  # Logging exporter for debugging
  logging:
    loglevel: debug
    sampling_initial: 5
    sampling_thereafter: 200

  # OTLP exporter for forwarding to other collectors
  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true

  # File exporter for backup/debugging
  file:
    path: /tmp/otel-data.json

extensions:
  # Health check extension
  health_check:
    endpoint: 0.0.0.0:13133

  # pprof extension for performance profiling
  pprof:
    endpoint: 0.0.0.0:1777

  # zpages extension for debugging
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  
  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp, jaeger, zipkin]
      processors: [memory_limiter, resource, attributes, probabilistic_sampler, batch]
      exporters: [jaeger, otlp/jaeger, logging]

    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, resource, transform, batch]
      exporters: [prometheus, logging]

    # Logs pipeline
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [logging]

  telemetry:
    logs:
      level: "debug"
    metrics:
      address: 0.0.0.0:8888